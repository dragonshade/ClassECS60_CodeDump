LeafNode:
    int cout; 
    int leafSize;
    InternalNode *parent;
    BTreeNode *leftSibling;
    BTreeNode *rightSibling;
    values[leafSize];
    LeafNode(int LSize, InternalNode *p, BTreeNode *left,BTreeNode *right);
    int getMinimum() const;
     LeafNode* insert(int value); // returns pointer to new Leaf if splits
    // else NULL
     void print(Queue <BTreeNode*> &queue);


InternalNode;
    int cout; 
    int leafSize;
    int internalSize;
    InternalNode *parent;
    BTreeNode *leftSibling;
    BTreeNode *rightSibling;
    BTreeNode **children;
    int *keys;
    InternalNode(int ISize, int LSize, InternalNode *p,BTreeNode *left, BTreeNode *right);
  int getMinimum()const;
  InternalNode* insert(int value); // returns pointer to new InternalNode
    // if it splits else NULL
  void insert(BTreeNode *oldRoot, BTreeNode *node2); // if root splits use this
  void insert(BTreeNode *newNode); // from a sibling
  void print(Queue <BTreeNode*> &queue);
}; // InternalNode class
